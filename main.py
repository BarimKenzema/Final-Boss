import re, base64, os, asyncio, json, socket, ipaddress
from urllib.parse import urlparse, parse_qs, quote
from telethon.sync import TelegramClient
import requests
import geoip2.database
from dns import resolver

# --- CONFIGURATION (Unchanged) ---
API_ID = os.environ.get('API_ID')
API_HASH = os.environ.get('API_HASH')
SESSION_STRING = os.environ.get('TELEGRAM_SESSION_STRING')
SESSION_NAME = 'my_telegram_session'

TARGET_GROUPS = [
    'letendorproxy', 'MuteVpnN', 'ShadowProxy66', 'free_vpn02', 'falcunargo',
    'DirectVPN', 'DailyV2RY', 'daily_configs', 'configpluse', 'ghalagyann',
    'ghalagyann2', 'Leecher56', 'tigervpnorg', 'v2rayng_fars', 'Mrsoulb',
    'vpnplusee_free', 'GetConfigIR', 'Pro_v2rayShop', 'surfboardv2ray', 
    'v2ray_official', 'horn_proxy', 'ocean_peace_mind', 'safavpnn', 'vless_config', 
    'vpn_tehran', 'vpnz4', 'customv2ray', 'vpnfail_v2ray', 'vpn_ioss', 'vmessorg', 
    'vmess_ir', 'vlessconfig', 'vistav2ray', 'vipv2rayngnp', 'v2rayvpn2', 
    'v2rayroz', 'v2rayopen', 'v2rayngvpn', 'v2rayng_matsuri', 'v2rayng_fast',
    'v2pedia', 'sadoshockss', 'toxicvid', 'tehranargo', 'spikevpn',
    'privatevpns', 'outline_ir', 'mehrosaboran', 'marambashi', 'hope_net'
]
OUTPUT_FILE_MAIN = 'mobo_net_subs.txt'
STATE_FILE = 'last_ids.json'
NEW_NAME = '@MoboNetPC'
MAX_CONFIGS_PER_FILE = 444
GEOIP_DB_PATH = 'GeoLite2-Country.mmdb'
COUNTRY_FLAGS = {
    "AD": "ğŸ‡¦ğŸ‡©", "AE": "ğŸ‡¦ğŸ‡ª", "AF": "ğŸ‡¦ğŸ‡«", "AG": "ğŸ‡¦ğŸ‡¬", "AI": "ğŸ‡¦ğŸ‡®", "AL": "ğŸ‡¦ğŸ‡±", "AM": "ğŸ‡¦ğŸ‡²", "AO": "ğŸ‡¦ğŸ‡´", "AQ": "ğŸ‡¦ğŸ‡¶", "AR": "ğŸ‡¦ğŸ‡·", "AS": "ğŸ‡¦ğŸ‡¸", "AT": "ğŸ‡¦ğŸ‡¹", "AU": "ğŸ‡¦ğŸ‡º", "AW": "ğŸ‡¦ğŸ‡¼", "AX": "ğŸ‡¦ğŸ‡½", "AZ": "ğŸ‡¦ğŸ‡¿", "BA": "ğŸ‡§ğŸ‡¦", "BB": "ğŸ‡§ğŸ‡§", "BD": "ğŸ‡§ğŸ‡©", "BE": "ğŸ‡§ğŸ‡ª", "BF": "ğŸ‡§ğŸ‡«", "BG": "ğŸ‡§ğŸ‡¬", "BH": "ğŸ‡§ğŸ‡­", "BI": "ğŸ‡§ğŸ‡®", "BJ": "ğŸ‡§ğŸ‡¯", "BL": "ğŸ‡§ğŸ‡±", "BM": "ğŸ‡§ğŸ‡²", "BN": "ğŸ‡§ğŸ‡³", "BO": "ğŸ‡§ğŸ‡´", "BR": "ğŸ‡§ğŸ‡·", "BS": "ğŸ‡§ğŸ‡¸", "BT": "ğŸ‡§ğŸ‡¹", "BW": "ğŸ‡§ğŸ‡¼", "BY": "ğŸ‡§ğŸ‡¾", "BZ": "ğŸ‡§ğŸ‡¿", "CA": "ğŸ‡¨ğŸ‡¦", "CC": "ğŸ‡¨ğŸ‡¨", "CD": "ğŸ‡¨ğŸ‡©", "CF": "ğŸ‡¨ğŸ‡«", "CG": "ğŸ‡¨ğŸ‡¬", "CH": "ğŸ‡¨ğŸ‡­", "CI": "ğŸ‡¨ğŸ‡®", "CK": "ğŸ‡¨ğŸ‡°", "CL": "ğŸ‡¨ğŸ‡±", "CM": "ğŸ‡¨ğŸ‡²", "CN": "ğŸ‡¨ğŸ‡³", "CO": "ğŸ‡¨ğŸ‡´", "CR": "ğŸ‡¨ğŸ‡·", "CU": "ğŸ‡¨ğŸ‡º", "CV": "ğŸ‡¨ğŸ‡»", "CW": "ğŸ‡¨ğŸ‡¼", "CX": "ğŸ‡¨ğŸ‡½", "CY": "ğŸ‡¨ğŸ‡¾", "CZ": "ğŸ‡¨ğŸ‡¿", "DE": "ğŸ‡©ğŸ‡ª", "DJ": "ğŸ‡©ğŸ‡¯", "DK": "ğŸ‡©ğŸ‡°", "DM": "ğŸ‡©ğŸ‡²", "DO": "ğŸ‡©ğŸ‡´", "DZ": "ğŸ‡©ğŸ‡¿", "EC": "ğŸ‡ªğŸ‡¨", "EE": "ğŸ‡ªğŸ‡ª", "EG": "ğŸ‡ªğŸ‡¬", "EH": "ğŸ‡ªğŸ‡­", "ER": "ğŸ‡ªğŸ‡·", "ES": "ğŸ‡ªğŸ‡¸", "ET": "ğŸ‡ªğŸ‡¹", "FI": "ğŸ‡«ğŸ‡®", "FJ": "ğŸ‡«ğŸ‡¯", "FK": "ğŸ‡«ğŸ‡°", "FM": "ğŸ‡«ğŸ‡²", "FO": "ğŸ‡«ğŸ‡´", "FR": "ğŸ‡«ğŸ‡·", "GA": "ğŸ‡¬ğŸ‡¦", "GB": "ğŸ‡¬ğŸ‡§", "GD": "ğŸ‡¬ğŸ‡©", "GE": "ğŸ‡¬ğŸ‡ª", "GF": "ğŸ‡¬ğŸ‡«", "GG": "ğŸ‡¬ğŸ‡¬", "GH": "ğŸ‡¬ğŸ‡­", "GI": "ğŸ‡¬ğŸ‡®", "GL": "ğŸ‡¬ğŸ‡±", "GM": "ğŸ‡¬ğŸ‡²", "GN": "ğŸ‡¬ğŸ‡³", "GP": "ğŸ‡¬ğŸ‡µ", "GQ": "ğŸ‡¬ğŸ‡¶", "GR": "ğŸ‡¬ğŸ‡·", "GT": "ğŸ‡¬ğŸ‡¹", "GU": "ğŸ‡¬ğŸ‡º", "GW": "ğŸ‡¬ğŸ‡¼", "GY": "ğŸ‡¬ğŸ‡¾", "HK": "ğŸ‡­ğŸ‡°", "HN": "ğŸ‡­ğŸ‡³", "HR": "ğŸ‡­ğŸ‡·", "HT": "ğŸ‡­ğŸ‡¹", "HU": "ğŸ‡­ğŸ‡º", "ID": "ğŸ‡®ğŸ‡©", "IE": "ğŸ‡®ğŸ‡ª", "IL": "ğŸ‡®ğŸ‡±", "IM": "ğŸ‡®ğŸ‡²", "IN": "ğŸ‡®ğŸ‡³", "IO": "ğŸ‡®ğŸ‡´", "IQ": "ğŸ‡®ğŸ‡¶", "IR": "ğŸ‡®ğŸ‡·", "IS": "ğŸ‡®ğŸ‡¸", "IT": "ğŸ‡®ğŸ‡¹", "JE": "ğŸ‡¯ğŸ‡ª", "JM": "ğŸ‡¯ğŸ‡²", "JO": "ğŸ‡¯ğŸ‡´", "JP": "ğŸ‡¯ğŸ‡µ", "KE": "ğŸ‡°ğŸ‡ª", "KG": "ğŸ‡°ğŸ‡¬", "KH": "ğŸ‡°ğŸ‡­", "KI": "ğŸ‡°ğŸ‡®", "KM": "ğŸ‡°ğŸ‡²", "KN": "ğŸ‡°ğŸ‡³", "KP": "ğŸ‡°ğŸ‡µ", "KR": "ğŸ‡°ğŸ‡·", "KW": "ğŸ‡°ğŸ‡¼", "KY": "ğŸ‡°ğŸ‡¾", "KZ": "ğŸ‡°ğŸ‡¿", "LA": "ğŸ‡±ğŸ‡¦", "LB": "ğŸ‡±ğŸ‡§", "LC": "ğŸ‡±ğŸ‡¨", "LI": "ğŸ‡±ğŸ‡®", "LK": "ğŸ‡±ğŸ‡°", "LR": "ğŸ‡±ğŸ‡·", "LS": "ğŸ‡±ğŸ‡¸", "LT": "ğŸ‡±ğŸ‡¹", "LU": "ğŸ‡±ğŸ‡º", "LV": "ğŸ‡±ğŸ‡»", "LY": "ğŸ‡±ğŸ‡¾", "MA": "ğŸ‡²ğŸ‡¦", "MC": "ğŸ‡²ğŸ‡¨", "MD": "ğŸ‡²ğŸ‡©", "ME": "ğŸ‡²ğŸ‡ª", "MG": "ğŸ‡²ğŸ‡¬", "MH": "ğŸ‡²ğŸ‡­", "MK": "ğŸ‡²ğŸ‡°", "ML": "ğŸ‡²ğŸ‡±", "MM": "ğŸ‡²ğŸ‡²", "MN": "ğŸ‡²ğŸ‡³", "MO": "ğŸ‡²ğŸ‡´", "MP": "ğŸ‡²ğŸ‡µ", "MQ": "ğŸ‡²ğŸ‡¶", "MR": "ğŸ‡²ğŸ‡·", "MS": "ğŸ‡²ğŸ‡¸", "MT": "ğŸ‡²ğŸ‡¹", "MU": "ğŸ‡²ğŸ‡º", "MV": "ğŸ‡²ğŸ‡»", "MW": "ğŸ‡²ğŸ‡¼", "MX": "ğŸ‡²ğŸ‡½", "MY": "ğŸ‡²ğŸ‡¾", "MZ": "ğŸ‡²ğŸ‡¿", "NA": "ğŸ‡³ğŸ‡¦", "NC": "ğŸ‡³ğŸ‡¨", "NE": "ğŸ‡³ğŸ‡ª", "NF": "ğŸ‡³ğŸ‡«", "NG": "ğŸ‡³ğŸ‡¬", "NI": "ğŸ‡³ğŸ‡®", "NL": "ğŸ‡³ğŸ‡±", "NO": "ğŸ‡³ğŸ‡´", "NP": "ğŸ‡³ğŸ‡µ", "NR": "ğŸ‡³ğŸ‡·", "NU": "ğŸ‡³ğŸ‡º", "NZ": "ğŸ‡³ğŸ‡¿", "OM": "ğŸ‡´ğŸ‡²", "PA": "ğŸ‡µğŸ‡¦", "PE": "ğŸ‡µğŸ‡ª", "PF": "ğŸ‡µğŸ‡«", "PG": "ğŸ‡µğŸ‡¬", "PH": "ğŸ‡µğŸ‡­", "PK": "ğŸ‡µğŸ‡°", "PL": "ğŸ‡µğŸ‡±", "PM": "ğŸ‡µğŸ‡²", "PR": "ğŸ‡µğŸ‡·", "PS": "ğŸ‡µğŸ‡¸", "PT": "ğŸ‡µğŸ‡¹", "PW": "ğŸ‡µğŸ‡¼", "PY": "ğŸ‡µğŸ‡¾", "QA": "ğŸ‡¶ğŸ‡¦", "RE": "ğŸ‡·ğŸ‡ª", "RO": "ğŸ‡·ğŸ‡´", "RS": "ğŸ‡·ğŸ‡¸", "RU": "ğŸ‡·ğŸ‡º", "RW": "ğŸ‡·ğŸ‡¼", "SA": "ğŸ‡¸ğŸ‡¦", "SB": "ğŸ‡¸ğŸ‡§", "SC": "ğŸ‡¸ğŸ‡¨", "SD": "ğŸ‡¸ğŸ‡©", "SE": "ğŸ‡¸ğŸ‡ª", "SG": "ğŸ‡¸ğŸ‡¬", "SH": "ğŸ‡¸ğŸ‡­", "SI": "ğŸ‡¸ğŸ‡®", "SK": "ğŸ‡¸ğŸ‡°", "SL": "ğŸ‡¸ğŸ‡±", "SM": "ğŸ‡¸ğŸ‡²", "SN": "ğŸ‡¸ğŸ‡³", "SO": "ğŸ‡¸ğŸ‡´", "SR": "ğŸ‡¸ğŸ‡·", "SS": "ğŸ‡¸ğŸ‡¸", "ST": "ğŸ‡¸ğŸ‡¹", "SV": "ğŸ‡¸ğŸ‡»", "SX": "ğŸ‡¸ğŸ‡½", "SY": "ğŸ‡¸ğŸ‡¾", "SZ": "ğŸ‡¸ğŸ‡¿", "TC": "ğŸ‡¹ğŸ‡¨", "TD": "ğŸ‡¹ğŸ‡©", "TG": "ğŸ‡¹ğŸ‡¬", "TH": "ğŸ‡¹ğŸ‡­", "TJ": "ğŸ‡¹ğŸ‡¯", "TK": "ğŸ‡¹ğŸ‡°", "TL": "ğŸ‡¹ğŸ‡±", "TM": "ğŸ‡¹ğŸ‡²", "TN": "ğŸ‡¹ğŸ‡³", "TO": "ğŸ‡¹ğŸ‡´", "TR": "ğŸ‡¹ğŸ‡·", "TT": "ğŸ‡¹ğŸ‡¹", "TV": "ğŸ‡¹ğŸ‡»", "TW": "ğŸ‡¹ğŸ‡¼", "TZ": "ğŸ‡¹ğŸ‡¿", "UA": "ğŸ‡ºğŸ‡¦", "UG": "ğŸ‡ºğŸ‡¬", "US": "ğŸ‡ºğŸ‡¸", "UY": "ğŸ‡ºğŸ‡¾", "UZ": "ğŸ‡ºğŸ‡¿", "VA": "ğŸ‡»ğŸ‡¦", "VC": "ğŸ‡»ğŸ‡¨", "VE": "ğŸ‡»ğŸ‡ª", "VG": "ğŸ‡»ğŸ‡¬", "VI": "ğŸ‡»ğŸ‡®", "VN": "ğŸ‡»ğŸ‡³", "VU": "ğŸ‡»ğŸ‡º", "WF": "ğŸ‡¼ğŸ‡«", "WS": "ğŸ‡¼ğŸ‡¸", "YE": "ğŸ‡¾ğŸ‡ª", "YT": "ğŸ‡¾ğŸ‡¹", "ZA": "ğŸ‡¿ğŸ‡¦", "ZM": "ğŸ‡¿ğŸ‡²", "ZW": "ğŸ‡¿ğŸ‡¼", "XX": "ğŸ”“"
}

dns_cache = {}
geoip_reader = None

def country_code_to_flag(iso_code): return COUNTRY_FLAGS.get(iso_code, "ğŸ”“")

# --- THIS FUNCTION IS THE ONLY PART THAT HAS CHANGED ---
def get_country_from_hostname(hostname):
    if not hostname: return "XX"
    ip_addr = dns_cache.get(hostname)
    if not ip_addr:
        try:
            if ipaddress.ip_address(hostname): ip_addr = hostname
            else: ip_addr = resolver.resolve(hostname, 'A')[0].to_text()
            dns_cache[hostname] = ip_addr
        except Exception:
            dns_cache[hostname] = None; return "XX"
    if not ip_addr or not geoip_reader: return "XX"
    try:
        return geoip_reader.country(ip_addr).country.iso_code or "XX"
    except Exception: 
        return "XX"

def get_config_attributes(config_str):
    try:
        parsed = urlparse(config_str)
        params = parse_qs(parsed.query)
        protocol = parsed.scheme
        hostname = parsed.hostname
        network = params.get('type', ['tcp'])[0].lower()
        security = params.get('security', ['none'])[0].lower()
        if security != 'reality' and 'pbk' in params: security = 'reality'
        country = get_country_from_hostname(hostname).upper()
        return {'protocol': protocol, 'network': network, 'security': security, 'country': country}
    except Exception: return None

def find_and_validate_configs(text):
    if not text: return []
    pattern = r'\b(?:vless|vmess|trojan|ss)://[^\s<>"\'`]+'
    valid_configs = []
    for config in re.findall(pattern, text):
        config = config.strip('.,;!?')
        is_valid = False
        if config.startswith('ss://') and len(config) > 60: is_valid = True
        elif config.startswith(('vless://', 'vmess://', 'trojan://')) and len(config) > 100: is_valid = True
        if is_valid: valid_configs.append(config)
    return valid_configs

def rename_config(link, name, country_code):
    flag = country_code_to_flag(country_code)
    new_name_with_flags = f"{flag} {name} {flag}"
    return f"{link.split('#')[0]}#{quote(new_name_with_flags)}"

async def process_message(message, newly_found_configs_map, all_known_configs_set):
    texts_to_scan = []
    if message.text: texts_to_scan.append(message.text)
    if message.is_reply:
        try:
            replied = await message.get_reply_message()
            if replied and replied.text: texts_to_scan.append(replied.text)
        except Exception: pass
    
    full_text = "\n".join(texts_to_scan)
    for config in find_and_validate_configs(full_text):
        base_config = config.split('#')[0]
        if base_config not in all_known_configs_set:
            all_known_configs_set.add(base_config)
            attrs = get_config_attributes(config)
            if attrs: newly_found_configs_map[base_config] = attrs
            
    if message.document and hasattr(message.document, 'mime_type') and message.document.mime_type == 'text/plain':
        if message.document.size < 1024 * 1024:
            try:
                content_bytes = await message.download_media(bytes)
                file_content = content_bytes.decode('utf-8', errors='ignore')
                for config in find_and_validate_configs(file_content):
                    base_config = config.split('#')[0]
                    if base_config not in all_known_configs_set:
                        all_known_configs_set.add(base_config)
                        attrs = get_config_attributes(config)
                        if attrs: newly_found_configs_map[base_config] = attrs
            except Exception as e: print(f"  -> Could not process file: {e}")

def load_list_from_file(filepath):
    if not os.path.exists(filepath): return []
    try:
        with open(filepath, 'r') as f:
            content = f.read()
            if content: return base64.b64decode(content).decode('utf-8').splitlines()
    except Exception: return []
    return []

async def main():
    print(f"--- Telegram Scraper v7.0 (with Enhanced Logging) ---")
    global geoip_reader
    if not all([API_ID, API_HASH, SESSION_STRING]): print("FATAL: Required secrets not set."); return

    if not os.path.exists(GEOIP_DB_PATH):
        try:
            r = requests.get("https://git.io/GeoLite2-Country.mmdb", allow_redirects=True)
            with open(GEOIP_DB_PATH, 'wb') as f: f.write(r.content)
        except Exception as e: print(f"ERROR: Could not download GeoIP db. {e}")
    try: geoip_reader = geoip2.database.Reader(GEOIP_DB_PATH)
    except Exception as e: print(f"Warning: Could not load GeoIP db. {e}")

    try:
        with open(f"{SESSION_NAME}.session", 'wb') as f: f.write(base64.b64decode(SESSION_STRING))
    except Exception as e: print(f"FATAL: Could not write session file. {e}"); return
    
    # The rest of the main function remains exactly the same as v7.0
    all_lists = {}
    all_paths = [OUTPUT_FILE_MAIN]
    for cat_dir in ['protocols', 'networks', 'security', 'countries']:
        if os.path.exists(cat_dir):
            all_paths.extend([os.path.join(cat_dir, f) for f in os.listdir(cat_dir) if f.endswith('.txt')])
    for path in all_paths:
        all_lists[path] = load_list_from_file(path)
    all_known_configs_set = set(c.split('#')[0] for lst in all_lists.values() for c in lst)
    print(f"Loaded {len(all_lists)} existing files containing {len(all_known_configs_set)} unique base configs.")

    last_ids = {}
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r') as f: last_ids = json.load(f)
        
    client = TelegramClient(SESSION_NAME, int(API_ID), API_HASH)
    newly_found_configs_map = {}
    new_latest_ids = last_ids.copy()
    try:
        await client.connect()
        if not await client.is_user_authorized(): print("FATAL: Session not authorized."); return
        print("Successfully connected to Telegram.")
        
        for group in TARGET_GROUPS:
            group_str = str(group)
            min_id = last_ids.get(group_str, 0)
            is_new_group = min_id == 0
            limit = 11 if is_new_group else None
            scan_type = f"last {limit}" if is_new_group else f"since ID > {min_id}"
            print(f"\n--- Scraping group: {group_str} ({scan_type}) ---")
            messages = [msg async for msg in client.iter_messages(group, min_id=min_id, limit=limit)]
            if messages:
                new_latest_ids[group_str] = messages[0].id
                print(f"Found {len(messages)} new message(s). New latest ID: {messages[0].id}")
                for message in messages:
                    await process_message(message, newly_found_configs_map, all_known_configs_set)
            else:
                print("No new messages found.")
    finally:
        await client.disconnect()
        print("Disconnected from Telegram.")

    print(f"\nFound {len(newly_found_configs_map)} new unique configs in this run.")

    if newly_found_configs_map:
        for base_config, attrs in newly_found_configs_map.items():
            renamed_config = rename_config(base_config, NEW_NAME, attrs['country'])
            
            paths = [
                OUTPUT_FILE_MAIN,
                f"protocols/{attrs['protocol']}.txt",
                f"networks/{attrs['network']}.txt",
                f"security/{attrs['security']}.txt",
                f"countries/{attrs['country'].lower()}.txt"
            ]
            for path in paths:
                if path not in all_lists: all_lists[path] = []
                if renamed_config not in set(all_lists[path]):
                    all_lists[path].append(renamed_config)

    # Special Category: reality_grpc
            if attrs['security'] == 'reality' and attrs['network'] == 'grpc':
                special_path = 'special/reality_grpc.txt'
                if special_path not in all_lists: all_lists[special_path] = []
                all_lists[special_path].append(renamed_config)
            
            # Special Category: grpc_xx
            if attrs['network'] == 'grpc' and attrs['country'] == 'XX':
                special_path_grpc_xx = 'special/grpc_xx.txt'
                if special_path_grpc_xx not in all_lists: all_lists[special_path_grpc_xx] = []
                all_lists[special_path_grpc_xx].append(renamed_config)
            # --- END OF NEW CODE BLOCK ---
    
    print("\n--- Pruning and saving all subscription files ---")
    for filepath, config_list in all_lists.items():
        if len(config_list) > MAX_CONFIGS_PER_FILE:
            num_to_remove = len(config_list) - MAX_CONFIGS_PER_FILE
            config_list = config_list[num_to_remove:]
            print(f"Pruned {filepath}: removed {num_to_remove} old configs.")
        
        dir_name = os.path.dirname(filepath)
        if dir_name: os.makedirs(dir_name, exist_ok=True)
        content = base64.b64encode("\n".join(config_list).encode('utf-8')).decode('utf-8')
        with open(filepath, 'w') as f: f.write(content)
        
    print(f"\nSuccessfully saved/updated {len(all_lists)} subscription files.")
    
    if new_latest_ids:
        with open(STATE_FILE, 'w') as f: json.dump(new_latest_ids, f, indent=2)
        print(f"Successfully updated bookmarks in {STATE_FILE}.")

if __name__ == "__main__":
    asyncio.run(main())
